
Fresh news:

*) We will now try to compress the b-tree with ZLIB when QDBM is built with ZLIB compression enabled.
Please ensure that it is the case. There is a section later in this README on this topic.
It seems to be the case by default with installation through fink
on MacOS.


==How to use it==

(I assume you have QDBM. Under MacOS, install it with "fink install qdbm14".)

make graycodesort

then 

./graycodesort somefile.csv someoutfile.csv

or 


./graycodesort -k 1 somefile.csv someoutfile.csv

==How to check whether QDBM was built with LZIP compression enabled==



(Hint: I give the method for MacOS, under Linux use the ldd command for the same
effect.)

Type in:

$ otool -L ./graycodesort

You should get something like this:


        /sw/lib/libqdbm.14.dylib (compatibility version 14.0.0, current version 14.11.0)
        /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.4.0)
        /usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.9)


Then query directly the dependencies of the libqdbm file:

$ otool -L   /sw/lib/libqdbm.14.dylib

You should get something like this:

        /sw/lib/libqdbm.14.dylib (compatibility version 14.0.0, current version 14.11.0)
        /sw/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)
        /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.3)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.5.1)
        /usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)

If you see libz, this means you have ZLIB compression enabled and you are ok. If not,
you need to rebuild QDBM with the ./configure flag --enable-zlib.

==How it works==

*) I use an external b-tree.

*) The gray code rank is sorted as a key.

*) The value is the line number.

*) The same key can appear repeatedly. (I hope.)

*) I used some public domain big integer library. I had
to tweak it a bit.

==The ugly==

*) On my machine, for 40,000 rows and 9,823 bitmaps, it takes about 5 seconds.
This means that, assuming you have the disk space, this program is going to
use several minutes per million lines to do the sort.

*) How can I be sure that this code is correct? I was careful, but I cannot be sure.

*) The b-tree that I build as a temporary file can grow **HUGE**. To each line
of your data file, add #ofbitmaps/8 bytes, plus some overhead due to the b-tree
(including 8 bytes per line to store the length of the value and the length of the
key). NOTE: this is alleviated somewhat by ZLIB compression, if you enabled it
when you built QDBM.

==The beautiful==

*) My code is simple.

*) I could output the gray code ranks to a text file if I wanted to... quite simply.
